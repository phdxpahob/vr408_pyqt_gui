
# -*- coding: utf-8 -*-

# Python script for ALLBOT VR408 Four-legged robot.
# Runs on Raspberry Pi with attached Adafruit PCA9685 PWM servo/LED 
# controller board plugged on the I2C bus. Requires the Adafruit 
# library to be installed on the Pi.

# Credits to Tony DiCola for the Adafruit library &
# Velleman nv for the ALLBOT
# User interface code generated by: PyQt5 UI code generator 5.15.2

# Author: Tsveti Hranov
# License: GPLv3
from __future__ import division
import time
import random

# Import the PCA9685 module.
import Adafruit_PCA9685

# Uncomment to enable debug output.
#import logging
#logging.basicConfig(level=logging.DEBUG)

from PyQt5 import QtCore, QtGui, QtWidgets

# Initialise the PCA9685 using the default address (0x40).
pwm = Adafruit_PCA9685.PCA9685()

servoList = [0, 1, 4, 5, 8, 9, 12, 13]

servo_min = 111 #150  # Min pulse length out of 4096
servo_max = 489 #600  # Max pulse length out of 4096

# Set PWM frequency. 
# You can use 60Hz, but you have to change servo _min & _max.
pwm.set_pwm_freq(50)

animateSpeed = 0.001

class Ui_AssignServoDialog(object):
    def setupUi(self, AssignServoDialog):
        AssignServoDialog.setObjectName("AssignServoDialog")
        AssignServoDialog.resize(473, 246)
        self.verticalLayout = QtWidgets.QVBoxLayout(AssignServoDialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Layout_settings = QtWidgets.QGridLayout()
        self.Layout_settings.setObjectName("Layout_settings")
        self.label_descr = QtWidgets.QLabel(AssignServoDialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_descr.sizePolicy().hasHeightForWidth())
        self.label_descr.setSizePolicy(sizePolicy)
        self.label_descr.setAlignment(QtCore.Qt.AlignCenter)
        self.label_descr.setObjectName("label_descr")
        self.Layout_settings.addWidget(self.label_descr, 0, 0, 1, 2)
        self.groupBox_hips = QtWidgets.QGroupBox(AssignServoDialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_hips.sizePolicy().hasHeightForWidth())
        self.groupBox_hips.setSizePolicy(sizePolicy)
        self.groupBox_hips.setObjectName("groupBox_hips")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox_hips)
        self.gridLayout.setObjectName("gridLayout")
        self.label_hFL = QtWidgets.QLabel(self.groupBox_hips)
        self.label_hFL.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_hFL.setObjectName("label_hFL")
        self.gridLayout.addWidget(self.label_hFL, 0, 0, 1, 1)
        self.combo_hfLeft = QtWidgets.QComboBox(self.groupBox_hips)
        self.combo_hfLeft.setObjectName("combo_hfLeft")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.combo_hfLeft.addItem("")
        self.gridLayout.addWidget(self.combo_hfLeft, 0, 1, 1, 1)
        self.label_hFR = QtWidgets.QLabel(self.groupBox_hips)
        self.label_hFR.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_hFR.setObjectName("label_hFR")
        self.gridLayout.addWidget(self.label_hFR, 1, 0, 1, 1)
        self.combo_hfRight = QtWidgets.QComboBox(self.groupBox_hips)
        self.combo_hfRight.setObjectName("combo_hfRight")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.combo_hfRight.addItem("")
        self.gridLayout.addWidget(self.combo_hfRight, 1, 1, 1, 1)
        self.label_hRL = QtWidgets.QLabel(self.groupBox_hips)
        self.label_hRL.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_hRL.setObjectName("label_hRL")
        self.gridLayout.addWidget(self.label_hRL, 2, 0, 1, 1)
        self.combo_hrLeft = QtWidgets.QComboBox(self.groupBox_hips)
        self.combo_hrLeft.setObjectName("combo_hrLeft")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.combo_hrLeft.addItem("")
        self.gridLayout.addWidget(self.combo_hrLeft, 2, 1, 1, 1)
        self.label_hRR = QtWidgets.QLabel(self.groupBox_hips)
        self.label_hRR.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_hRR.setObjectName("label_hRR")
        self.gridLayout.addWidget(self.label_hRR, 3, 0, 1, 1)
        self.combo_hrRight = QtWidgets.QComboBox(self.groupBox_hips)
        self.combo_hrRight.setObjectName("combo_hrRight")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.combo_hrRight.addItem("")
        self.gridLayout.addWidget(self.combo_hrRight, 3, 1, 1, 1)
        self.Layout_settings.addWidget(self.groupBox_hips, 1, 0, 1, 1)
        self.groupBox_knees = QtWidgets.QGroupBox(AssignServoDialog)
        self.groupBox_knees.setObjectName("groupBox_knees")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_knees)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_kFL = QtWidgets.QLabel(self.groupBox_knees)
        self.label_kFL.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_kFL.setObjectName("label_kFL")
        self.gridLayout_2.addWidget(self.label_kFL, 0, 0, 1, 1)
        self.combo_kFLeft = QtWidgets.QComboBox(self.groupBox_knees)
        self.combo_kFLeft.setObjectName("combo_kFLeft")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.combo_kFLeft.addItem("")
        self.gridLayout_2.addWidget(self.combo_kFLeft, 0, 1, 1, 1)
        self.label_kFR = QtWidgets.QLabel(self.groupBox_knees)
        self.label_kFR.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_kFR.setObjectName("label_kFR")
        self.gridLayout_2.addWidget(self.label_kFR, 1, 0, 1, 1)
        self.combo_kFRight = QtWidgets.QComboBox(self.groupBox_knees)
        self.combo_kFRight.setObjectName("combo_kFRight")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.combo_kFRight.addItem("")
        self.gridLayout_2.addWidget(self.combo_kFRight, 1, 1, 1, 1)
        self.label_kRL = QtWidgets.QLabel(self.groupBox_knees)
        self.label_kRL.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_kRL.setObjectName("label_kRL")
        self.gridLayout_2.addWidget(self.label_kRL, 2, 0, 1, 1)
        self.combo_kRLeft = QtWidgets.QComboBox(self.groupBox_knees)
        self.combo_kRLeft.setObjectName("combo_kRLeft")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.combo_kRLeft.addItem("")
        self.gridLayout_2.addWidget(self.combo_kRLeft, 2, 1, 1, 1)
        self.label_kRR = QtWidgets.QLabel(self.groupBox_knees)
        self.label_kRR.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_kRR.setObjectName("label_kRR")
        self.gridLayout_2.addWidget(self.label_kRR, 3, 0, 1, 1)
        self.combo_kRRight = QtWidgets.QComboBox(self.groupBox_knees)
        self.combo_kRRight.setObjectName("combo_kRRight")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.combo_kRRight.addItem("")
        self.gridLayout_2.addWidget(self.combo_kRRight, 3, 1, 1, 1)
        self.Layout_settings.addWidget(self.groupBox_knees, 1, 1, 1, 1)
        self.verticalLayout.addLayout(self.Layout_settings)
        self.buttonBox = QtWidgets.QDialogButtonBox(AssignServoDialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok|QtWidgets.QDialogButtonBox.RestoreDefaults)
        self.buttonBox.setObjectName("buttonBox")
        self.verticalLayout.addWidget(self.buttonBox)

        self.retranslateUi(AssignServoDialog)
        self.buttonBox.accepted.connect(AssignServoDialog.accept)
        self.buttonBox.rejected.connect(AssignServoDialog.reject)
        QtCore.QMetaObject.connectSlotsByName(AssignServoDialog)

    def retranslateUi(self, AssignServoDialog):
        _translate = QtCore.QCoreApplication.translate
        AssignServoDialog.setWindowTitle(_translate("AssignServoDialog", "Dialog"))
        self.label_descr.setText(_translate("AssignServoDialog", "VR408: ALLBOT four-legged robot with two joints per leg"))
        self.groupBox_hips.setTitle(_translate("AssignServoDialog", "Hip Joints"))
        self.label_hFL.setText(_translate("AssignServoDialog", "hipFrontLeft"))
        self.combo_hfLeft.setItemText(0, _translate("AssignServoDialog", "Channel 0"))
        self.combo_hfLeft.setItemText(1, _translate("AssignServoDialog", "Channel 1"))
        self.combo_hfLeft.setItemText(2, _translate("AssignServoDialog", "Channel 2"))
        self.combo_hfLeft.setItemText(3, _translate("AssignServoDialog", "Channel 3"))
        self.combo_hfLeft.setItemText(4, _translate("AssignServoDialog", "Channel 4"))
        self.combo_hfLeft.setItemText(5, _translate("AssignServoDialog", "Channel 5"))
        self.combo_hfLeft.setItemText(6, _translate("AssignServoDialog", "Channel 6"))
        self.combo_hfLeft.setItemText(7, _translate("AssignServoDialog", "Channel 7"))
        self.combo_hfLeft.setItemText(8, _translate("AssignServoDialog", "Channel 8"))
        self.combo_hfLeft.setItemText(9, _translate("AssignServoDialog", "Channel 9"))
        self.combo_hfLeft.setItemText(10, _translate("AssignServoDialog", "Channel 10"))
        self.combo_hfLeft.setItemText(11, _translate("AssignServoDialog", "Channel 11"))
        self.combo_hfLeft.setItemText(12, _translate("AssignServoDialog", "Channel 12"))
        self.combo_hfLeft.setItemText(13, _translate("AssignServoDialog", "Channel 13"))
        self.combo_hfLeft.setItemText(14, _translate("AssignServoDialog", "Channel 14"))
        self.combo_hfLeft.setItemText(15, _translate("AssignServoDialog", "Channel 15"))
        self.label_hFR.setText(_translate("AssignServoDialog", "hipFrontRight"))
        self.combo_hfRight.setItemText(0, _translate("AssignServoDialog", "Channel 0"))
        self.combo_hfRight.setItemText(1, _translate("AssignServoDialog", "Channel 1"))
        self.combo_hfRight.setItemText(2, _translate("AssignServoDialog", "Channel 2"))
        self.combo_hfRight.setItemText(3, _translate("AssignServoDialog", "Channel 3"))
        self.combo_hfRight.setItemText(4, _translate("AssignServoDialog", "Channel 4"))
        self.combo_hfRight.setItemText(5, _translate("AssignServoDialog", "Channel 5"))
        self.combo_hfRight.setItemText(6, _translate("AssignServoDialog", "Channel 6"))
        self.combo_hfRight.setItemText(7, _translate("AssignServoDialog", "Channel 7"))
        self.combo_hfRight.setItemText(8, _translate("AssignServoDialog", "Channel 8"))
        self.combo_hfRight.setItemText(9, _translate("AssignServoDialog", "Channel 9"))
        self.combo_hfRight.setItemText(10, _translate("AssignServoDialog", "Channel 10"))
        self.combo_hfRight.setItemText(11, _translate("AssignServoDialog", "Channel 11"))
        self.combo_hfRight.setItemText(12, _translate("AssignServoDialog", "Channel 12"))
        self.combo_hfRight.setItemText(13, _translate("AssignServoDialog", "Channel 13"))
        self.combo_hfRight.setItemText(14, _translate("AssignServoDialog", "Channel 14"))
        self.combo_hfRight.setItemText(15, _translate("AssignServoDialog", "Channel 15"))
        self.label_hRL.setText(_translate("AssignServoDialog", "hipRearLeft"))
        self.combo_hrLeft.setItemText(0, _translate("AssignServoDialog", "Channel 0"))
        self.combo_hrLeft.setItemText(1, _translate("AssignServoDialog", "Channel 1"))
        self.combo_hrLeft.setItemText(2, _translate("AssignServoDialog", "Channel 2"))
        self.combo_hrLeft.setItemText(3, _translate("AssignServoDialog", "Channel 3"))
        self.combo_hrLeft.setItemText(4, _translate("AssignServoDialog", "Channel 4"))
        self.combo_hrLeft.setItemText(5, _translate("AssignServoDialog", "Channel 5"))
        self.combo_hrLeft.setItemText(6, _translate("AssignServoDialog", "Channel 6"))
        self.combo_hrLeft.setItemText(7, _translate("AssignServoDialog", "Channel 7"))
        self.combo_hrLeft.setItemText(8, _translate("AssignServoDialog", "Channel 8"))
        self.combo_hrLeft.setItemText(9, _translate("AssignServoDialog", "Channel 9"))
        self.combo_hrLeft.setItemText(10, _translate("AssignServoDialog", "Channel 10"))
        self.combo_hrLeft.setItemText(11, _translate("AssignServoDialog", "Channel 11"))
        self.combo_hrLeft.setItemText(12, _translate("AssignServoDialog", "Channel 12"))
        self.combo_hrLeft.setItemText(13, _translate("AssignServoDialog", "Channel 13"))
        self.combo_hrLeft.setItemText(14, _translate("AssignServoDialog", "Channel 14"))
        self.combo_hrLeft.setItemText(15, _translate("AssignServoDialog", "Channel 15"))
        self.label_hRR.setText(_translate("AssignServoDialog", "hipRearRight"))
        self.combo_hrRight.setItemText(0, _translate("AssignServoDialog", "Channel 0"))
        self.combo_hrRight.setItemText(1, _translate("AssignServoDialog", "Channel 1"))
        self.combo_hrRight.setItemText(2, _translate("AssignServoDialog", "Channel 2"))
        self.combo_hrRight.setItemText(3, _translate("AssignServoDialog", "Channel 3"))
        self.combo_hrRight.setItemText(4, _translate("AssignServoDialog", "Channel 4"))
        self.combo_hrRight.setItemText(5, _translate("AssignServoDialog", "Channel 5"))
        self.combo_hrRight.setItemText(6, _translate("AssignServoDialog", "Channel 6"))
        self.combo_hrRight.setItemText(7, _translate("AssignServoDialog", "Channel 7"))
        self.combo_hrRight.setItemText(8, _translate("AssignServoDialog", "Channel 8"))
        self.combo_hrRight.setItemText(9, _translate("AssignServoDialog", "Channel 9"))
        self.combo_hrRight.setItemText(10, _translate("AssignServoDialog", "Channel 10"))
        self.combo_hrRight.setItemText(11, _translate("AssignServoDialog", "Channel 11"))
        self.combo_hrRight.setItemText(12, _translate("AssignServoDialog", "Channel 12"))
        self.combo_hrRight.setItemText(13, _translate("AssignServoDialog", "Channel 13"))
        self.combo_hrRight.setItemText(14, _translate("AssignServoDialog", "Channel 14"))
        self.combo_hrRight.setItemText(15, _translate("AssignServoDialog", "Channel 15"))
        self.groupBox_knees.setTitle(_translate("AssignServoDialog", "Knee Joints"))
        self.label_kFL.setText(_translate("AssignServoDialog", "kneeFrontLeft"))
        self.combo_kFLeft.setItemText(0, _translate("AssignServoDialog", "Channel 0"))
        self.combo_kFLeft.setItemText(1, _translate("AssignServoDialog", "Channel 1"))
        self.combo_kFLeft.setItemText(2, _translate("AssignServoDialog", "Channel 2"))
        self.combo_kFLeft.setItemText(3, _translate("AssignServoDialog", "Channel 3"))
        self.combo_kFLeft.setItemText(4, _translate("AssignServoDialog", "Channel 4"))
        self.combo_kFLeft.setItemText(5, _translate("AssignServoDialog", "Channel 5"))
        self.combo_kFLeft.setItemText(6, _translate("AssignServoDialog", "Channel 6"))
        self.combo_kFLeft.setItemText(7, _translate("AssignServoDialog", "Channel 7"))
        self.combo_kFLeft.setItemText(8, _translate("AssignServoDialog", "Channel 8"))
        self.combo_kFLeft.setItemText(9, _translate("AssignServoDialog", "Channel 9"))
        self.combo_kFLeft.setItemText(10, _translate("AssignServoDialog", "Channel 10"))
        self.combo_kFLeft.setItemText(11, _translate("AssignServoDialog", "Channel 11"))
        self.combo_kFLeft.setItemText(12, _translate("AssignServoDialog", "Channel 12"))
        self.combo_kFLeft.setItemText(13, _translate("AssignServoDialog", "Channel 13"))
        self.combo_kFLeft.setItemText(14, _translate("AssignServoDialog", "Channel 14"))
        self.combo_kFLeft.setItemText(15, _translate("AssignServoDialog", "Channel 15"))
        self.label_kFR.setText(_translate("AssignServoDialog", "kneeFrontRight"))
        self.combo_kFRight.setItemText(0, _translate("AssignServoDialog", "Channel 0"))
        self.combo_kFRight.setItemText(1, _translate("AssignServoDialog", "Channel 1"))
        self.combo_kFRight.setItemText(2, _translate("AssignServoDialog", "Channel 2"))
        self.combo_kFRight.setItemText(3, _translate("AssignServoDialog", "Channel 3"))
        self.combo_kFRight.setItemText(4, _translate("AssignServoDialog", "Channel 4"))
        self.combo_kFRight.setItemText(5, _translate("AssignServoDialog", "Channel 5"))
        self.combo_kFRight.setItemText(6, _translate("AssignServoDialog", "Channel 6"))
        self.combo_kFRight.setItemText(7, _translate("AssignServoDialog", "Channel 7"))
        self.combo_kFRight.setItemText(8, _translate("AssignServoDialog", "Channel 8"))
        self.combo_kFRight.setItemText(9, _translate("AssignServoDialog", "Channel 9"))
        self.combo_kFRight.setItemText(10, _translate("AssignServoDialog", "Channel 10"))
        self.combo_kFRight.setItemText(11, _translate("AssignServoDialog", "Channel 11"))
        self.combo_kFRight.setItemText(12, _translate("AssignServoDialog", "Channel 12"))
        self.combo_kFRight.setItemText(13, _translate("AssignServoDialog", "Channel 13"))
        self.combo_kFRight.setItemText(14, _translate("AssignServoDialog", "Channel 14"))
        self.combo_kFRight.setItemText(15, _translate("AssignServoDialog", "Channel 15"))
        self.label_kRL.setText(_translate("AssignServoDialog", "kneeRearLeft"))
        self.combo_kRLeft.setItemText(0, _translate("AssignServoDialog", "Channel 0"))
        self.combo_kRLeft.setItemText(1, _translate("AssignServoDialog", "Channel 1"))
        self.combo_kRLeft.setItemText(2, _translate("AssignServoDialog", "Channel 2"))
        self.combo_kRLeft.setItemText(3, _translate("AssignServoDialog", "Channel 3"))
        self.combo_kRLeft.setItemText(4, _translate("AssignServoDialog", "Channel 4"))
        self.combo_kRLeft.setItemText(5, _translate("AssignServoDialog", "Channel 5"))
        self.combo_kRLeft.setItemText(6, _translate("AssignServoDialog", "Channel 6"))
        self.combo_kRLeft.setItemText(7, _translate("AssignServoDialog", "Channel 7"))
        self.combo_kRLeft.setItemText(8, _translate("AssignServoDialog", "Channel 8"))
        self.combo_kRLeft.setItemText(9, _translate("AssignServoDialog", "Channel 9"))
        self.combo_kRLeft.setItemText(10, _translate("AssignServoDialog", "Channel 10"))
        self.combo_kRLeft.setItemText(11, _translate("AssignServoDialog", "Channel 11"))
        self.combo_kRLeft.setItemText(12, _translate("AssignServoDialog", "Channel 12"))
        self.combo_kRLeft.setItemText(13, _translate("AssignServoDialog", "Channel 13"))
        self.combo_kRLeft.setItemText(14, _translate("AssignServoDialog", "Channel 14"))
        self.combo_kRLeft.setItemText(15, _translate("AssignServoDialog", "Channel 15"))
        self.label_kRR.setText(_translate("AssignServoDialog", "kneeRearRight"))
        self.combo_kRRight.setItemText(0, _translate("AssignServoDialog", "Channel 0"))
        self.combo_kRRight.setItemText(1, _translate("AssignServoDialog", "Channel 1"))
        self.combo_kRRight.setItemText(2, _translate("AssignServoDialog", "Channel 2"))
        self.combo_kRRight.setItemText(3, _translate("AssignServoDialog", "Channel 3"))
        self.combo_kRRight.setItemText(4, _translate("AssignServoDialog", "Channel 4"))
        self.combo_kRRight.setItemText(5, _translate("AssignServoDialog", "Channel 5"))
        self.combo_kRRight.setItemText(6, _translate("AssignServoDialog", "Channel 6"))
        self.combo_kRRight.setItemText(7, _translate("AssignServoDialog", "Channel 7"))
        self.combo_kRRight.setItemText(8, _translate("AssignServoDialog", "Channel 8"))
        self.combo_kRRight.setItemText(9, _translate("AssignServoDialog", "Channel 9"))
        self.combo_kRRight.setItemText(10, _translate("AssignServoDialog", "Channel 10"))
        self.combo_kRRight.setItemText(11, _translate("AssignServoDialog", "Channel 11"))
        self.combo_kRRight.setItemText(12, _translate("AssignServoDialog", "Channel 12"))
        self.combo_kRRight.setItemText(13, _translate("AssignServoDialog", "Channel 13"))
        self.combo_kRRight.setItemText(14, _translate("AssignServoDialog", "Channel 14"))
        self.combo_kRRight.setItemText(15, _translate("AssignServoDialog", "Channel 15"))

class Ui_DialogServoConfig(object):
    def setupUi(self, DialogServoConfig):
        DialogServoConfig.setObjectName("DialogServoConfig")
        DialogServoConfig.resize(347, 378)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(DialogServoConfig)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.groupBox_hware = QtWidgets.QGroupBox(DialogServoConfig)
        self.groupBox_hware.setObjectName("groupBox_hware")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox_hware)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Layout_iicBus = QtWidgets.QHBoxLayout()
        self.Layout_iicBus.setObjectName("Layout_iicBus")
        self.label_iicBus = QtWidgets.QLabel(self.groupBox_hware)
        self.label_iicBus.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_iicBus.setObjectName("label_iicBus")
        self.Layout_iicBus.addWidget(self.label_iicBus)
        self.combo_selBus = QtWidgets.QComboBox(self.groupBox_hware)
        self.combo_selBus.setObjectName("combo_selBus")
        self.combo_selBus.addItem("")
        self.combo_selBus.addItem("")
        self.Layout_iicBus.addWidget(self.combo_selBus)
        self.label_defaultBus = QtWidgets.QLabel(self.groupBox_hware)
        self.label_defaultBus.setObjectName("label_defaultBus")
        self.Layout_iicBus.addWidget(self.label_defaultBus)
        self.verticalLayout.addLayout(self.Layout_iicBus)
        self.Layout_iicAddress = QtWidgets.QHBoxLayout()
        self.Layout_iicAddress.setObjectName("Layout_iicAddress")
        self.label_iicAddress = QtWidgets.QLabel(self.groupBox_hware)
        self.label_iicAddress.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_iicAddress.setObjectName("label_iicAddress")
        self.Layout_iicAddress.addWidget(self.label_iicAddress)
        self.lineEdit_Address = QtWidgets.QLineEdit(self.groupBox_hware)
        self.lineEdit_Address.setObjectName("lineEdit_Address")
        self.Layout_iicAddress.addWidget(self.lineEdit_Address)
        self.label_defaultAddress = QtWidgets.QLabel(self.groupBox_hware)
        self.label_defaultAddress.setObjectName("label_defaultAddress")
        self.Layout_iicAddress.addWidget(self.label_defaultAddress)
        self.verticalLayout.addLayout(self.Layout_iicAddress)
        self.verticalLayout_3.addWidget(self.groupBox_hware)
        self.groupBox_sware = QtWidgets.QGroupBox(DialogServoConfig)
        self.groupBox_sware.setObjectName("groupBox_sware")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_sware)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Layout_frequency = QtWidgets.QHBoxLayout()
        self.Layout_frequency.setObjectName("Layout_frequency")
        self.label_frequency = QtWidgets.QLabel(self.groupBox_sware)
        self.label_frequency.setObjectName("label_frequency")
        self.Layout_frequency.addWidget(self.label_frequency)
        self.lineEdit_fvalue = QtWidgets.QLineEdit(self.groupBox_sware)
        self.lineEdit_fvalue.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lineEdit_fvalue.setObjectName("lineEdit_fvalue")
        self.Layout_frequency.addWidget(self.lineEdit_fvalue)
        self.combo_unit = QtWidgets.QComboBox(self.groupBox_sware)
        self.combo_unit.setObjectName("combo_unit")
        self.combo_unit.addItem("")
        self.combo_unit.addItem("")
        self.combo_unit.addItem("")
        self.Layout_frequency.addWidget(self.combo_unit)
        self.verticalLayout_2.addLayout(self.Layout_frequency)
        self.Layout_minAngle = QtWidgets.QHBoxLayout()
        self.Layout_minAngle.setObjectName("Layout_minAngle")
        self.label_minAngle = QtWidgets.QLabel(self.groupBox_sware)
        self.label_minAngle.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_minAngle.setObjectName("label_minAngle")
        self.Layout_minAngle.addWidget(self.label_minAngle)
        self.lineEdit_minAngleVal = QtWidgets.QLineEdit(self.groupBox_sware)
        self.lineEdit_minAngleVal.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lineEdit_minAngleVal.setObjectName("lineEdit_minAngleVal")
        self.Layout_minAngle.addWidget(self.lineEdit_minAngleVal)
        self.label_40961 = QtWidgets.QLabel(self.groupBox_sware)
        self.label_40961.setObjectName("label_40961")
        self.Layout_minAngle.addWidget(self.label_40961)
        self.verticalLayout_2.addLayout(self.Layout_minAngle)
        self.Layout_maxAngle = QtWidgets.QHBoxLayout()
        self.Layout_maxAngle.setObjectName("Layout_maxAngle")
        self.label_maxAngle = QtWidgets.QLabel(self.groupBox_sware)
        self.label_maxAngle.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_maxAngle.setObjectName("label_maxAngle")
        self.Layout_maxAngle.addWidget(self.label_maxAngle)
        self.lineEdit_maxAngleVal = QtWidgets.QLineEdit(self.groupBox_sware)
        self.lineEdit_maxAngleVal.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.lineEdit_maxAngleVal.setObjectName("lineEdit_maxAngleVal")
        self.Layout_maxAngle.addWidget(self.lineEdit_maxAngleVal)
        self.label_40962 = QtWidgets.QLabel(self.groupBox_sware)
        self.label_40962.setObjectName("label_40962")
        self.Layout_maxAngle.addWidget(self.label_40962)
        self.verticalLayout_2.addLayout(self.Layout_maxAngle)
        self.verticalLayout_3.addWidget(self.groupBox_sware)
        self.buttonBox = QtWidgets.QDialogButtonBox(DialogServoConfig)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok|QtWidgets.QDialogButtonBox.RestoreDefaults)
        self.buttonBox.setObjectName("buttonBox")
        self.verticalLayout_3.addWidget(self.buttonBox)

        self.retranslateUi(DialogServoConfig)
        self.buttonBox.accepted.connect(DialogServoConfig.accept)
        self.buttonBox.rejected.connect(DialogServoConfig.reject)
        QtCore.QMetaObject.connectSlotsByName(DialogServoConfig)

    def retranslateUi(self, DialogServoConfig):
        _translate = QtCore.QCoreApplication.translate
        DialogServoConfig.setWindowTitle(_translate("DialogServoConfig", "Dialog"))
        self.groupBox_hware.setTitle(_translate("DialogServoConfig", "Hardware Settings"))
        self.label_iicBus.setText(_translate("DialogServoConfig", "I2C Bus:"))
        self.combo_selBus.setItemText(0, _translate("DialogServoConfig", "Bus 1"))
        self.combo_selBus.setItemText(1, _translate("DialogServoConfig", "Bus 0"))
        self.label_defaultBus.setText(_translate("DialogServoConfig", "(Default Bus 1)"))
        self.label_iicAddress.setText(_translate("DialogServoConfig", "I2C Address:"))
        #self.lineEdit_Address.setText(_translate("DialogServoConfig", "0x40"))
        self.label_defaultAddress.setText(_translate("DialogServoConfig", "(Default 0x40)"))
        self.groupBox_sware.setTitle(_translate("DialogServoConfig", "Software Settings"))
        self.label_frequency.setText(_translate("DialogServoConfig", "Pulse Frequency:"))
        #self.lineEdit_fvalue.setText(_translate("DialogServoConfig", "50"))
        self.combo_unit.setItemText(0, _translate("DialogServoConfig", "Hz"))
        self.combo_unit.setItemText(1, _translate("DialogServoConfig", "Period"))
        self.combo_unit.setItemText(2, _translate("DialogServoConfig", "Counts"))
        self.label_minAngle.setText(_translate("DialogServoConfig", "Minimum angle pulse count:"))
        #self.lineEdit_minAngleVal.setText(_translate("DialogServoConfig", "111"))
        self.label_40961.setText(_translate("DialogServoConfig", "/ 4096"))
        self.label_maxAngle.setText(_translate("DialogServoConfig", "Maximum angle pulse count:"))
        #self.lineEdit_maxAngleVal.setText(_translate("DialogServoConfig", "489"))
        self.label_40962.setText(_translate("DialogServoConfig", "/ 4096"))

class Ui_RosBotMainWindow(object):
    def setupUi(self, RosBotMainWindow):
        RosBotMainWindow.setObjectName("RosBotMainWindow")
        RosBotMainWindow.resize(549, 520)
        RosBotMainWindow.setMaximumSize(QtCore.QSize(1022, 16777215))
        self.centralWidget = QtWidgets.QWidget(RosBotMainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.gridLayout_16 = QtWidgets.QGridLayout(self.centralWidget)
        self.gridLayout_16.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_16.setSpacing(6)
        self.gridLayout_16.setObjectName("gridLayout_16")
        self.groupBox_diag = QtWidgets.QGroupBox(self.centralWidget)
        self.groupBox_diag.setObjectName("groupBox_diag")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_diag)
        self.verticalLayout_6.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_6.setSpacing(6)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.textBrowser_log = QtWidgets.QTextBrowser(self.groupBox_diag)
        self.textBrowser_log.setObjectName("textBrowser_log")        
        self.verticalLayout_6.addWidget(self.textBrowser_log)
        self.gridLayout_16.addWidget(self.groupBox_diag, 2, 0, 1, 2)
        self.tabs_teleop = QtWidgets.QTabWidget(self.centralWidget)
        self.tabs_teleop.setMaximumSize(QtCore.QSize(700, 16777215))
        self.tabs_teleop.setAutoFillBackground(False)
        self.tabs_teleop.setObjectName("tabs_teleop")
        self.tab_Movement = QtWidgets.QWidget()
        self.tab_Movement.setEnabled(True)
        self.tab_Movement.setObjectName("tab_Movement")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_Movement)
        self.gridLayout_4.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_4.setSpacing(6)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.gridLayout_movement = QtWidgets.QGridLayout()
        self.gridLayout_movement.setSpacing(6)
        self.gridLayout_movement.setObjectName("gridLayout_movement")
        self.gridLayout_speed = QtWidgets.QGridLayout()
        self.gridLayout_speed.setSpacing(6)
        self.gridLayout_speed.setObjectName("gridLayout_speed")
        self.groupBox_speed = QtWidgets.QGroupBox(self.tab_Movement)
        self.groupBox_speed.setObjectName("groupBox_speed")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.groupBox_speed)
        self.horizontalLayout_5.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_5.setSpacing(6)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_min = QtWidgets.QLabel(self.groupBox_speed)
        self.label_min.setObjectName("label_min")
        self.horizontalLayout_5.addWidget(self.label_min)
        self.speedSlider = QtWidgets.QSlider(self.groupBox_speed)
        self.speedSlider.setOrientation(QtCore.Qt.Horizontal)
        self.speedSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.speedSlider.setObjectName("speedSlider")
        self.speedSlider.valueChanged.connect(onSliderChange)
        
        self.horizontalLayout_5.addWidget(self.speedSlider)
        self.label_max = QtWidgets.QLabel(self.groupBox_speed)
        self.label_max.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_max.setObjectName("label_max")
        self.horizontalLayout_5.addWidget(self.label_max)
        self.gridLayout_speed.addWidget(self.groupBox_speed, 0, 0, 1, 1)
        self.gridLayout_movement.addLayout(self.gridLayout_speed, 1, 1, 1, 1)
        self.groupBox_linear = QtWidgets.QGroupBox(self.tab_Movement)
        self.groupBox_linear.setObjectName("groupBox_linear")
        self.gridLayout_direction = QtWidgets.QGridLayout(self.groupBox_linear)
        self.gridLayout_direction.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_direction.setSpacing(6)
        self.gridLayout_direction.setObjectName("gridLayout_direction")
        
        self.Button_right = QtWidgets.QPushButton(self.groupBox_linear)
        self.Button_right.setObjectName("Button_right")
        self.Button_right.clicked.connect(moveRight)
        self.gridLayout_direction.addWidget(self.Button_right, 1, 0, 1, 1)
        
        self.Button_backward = QtWidgets.QPushButton(self.groupBox_linear)
        self.Button_backward.setObjectName("Button_backward")
        self.Button_backward.clicked.connect(moveBackward)
        self.gridLayout_direction.addWidget(self.Button_backward, 2, 1, 1, 1)
        
        self.Button_left = QtWidgets.QPushButton(self.groupBox_linear)
        self.Button_left.setObjectName("Button_left")
        self.Button_left.clicked.connect(moveLeft)
        self.gridLayout_direction.addWidget(self.Button_left, 1, 2, 1, 1)
        self.Button_forward = QtWidgets.QPushButton(self.groupBox_linear)
        self.Button_forward.setObjectName("Button_forward")
        self.Button_forward.clicked.connect(moveForward)
        
        self.gridLayout_direction.addWidget(self.Button_forward, 0, 1, 1, 1)
        self.gridLayout_movement.addWidget(self.groupBox_linear, 0, 0, 2, 1)
        self.groupBox_angular = QtWidgets.QGroupBox(self.tab_Movement)
        self.groupBox_angular.setObjectName("groupBox_angular")
        self.gridLayout_rotate = QtWidgets.QGridLayout(self.groupBox_angular)
        self.gridLayout_rotate.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_rotate.setSpacing(6)
        
        self.gridLayout_rotate.setObjectName("gridLayout_rotate")
        self.Button_zminus = QtWidgets.QPushButton(self.groupBox_angular)
        self.Button_zminus.setObjectName("Button_zminus")
        self.Button_zminus.clicked.connect(RotateCW)
        
        self.gridLayout_rotate.addWidget(self.Button_zminus, 0, 0, 1, 1)
        self.Button_zplus = QtWidgets.QPushButton(self.groupBox_angular)
        self.Button_zplus.setObjectName("Button_zplus")
        self.Button_zplus.clicked.connect(RotateCCW)
        
        self.gridLayout_rotate.addWidget(self.Button_zplus, 0, 1, 1, 1)
        self.gridLayout_movement.addWidget(self.groupBox_angular, 0, 1, 1, 1)
        self.gridLayout_4.addLayout(self.gridLayout_movement, 0, 0, 1, 1)
        self.tabs_teleop.addTab(self.tab_Movement, "")
        self.tab_gestures = QtWidgets.QWidget()
        self.tab_gestures.setObjectName("tab_gestures")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.tab_gestures)
        self.gridLayout_7.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_7.setSpacing(6)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.groupBox_wave = QtWidgets.QGroupBox(self.tab_gestures)
        self.groupBox_wave.setObjectName("groupBox_wave")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_wave)
        self.verticalLayout_2.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_2.setSpacing(6)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Button_waveFLeft = QtWidgets.QPushButton(self.groupBox_wave)
        self.Button_waveFLeft.setObjectName("Button_waveFLeft")
        self.Button_waveFLeft.clicked.connect(waveFLeft)
        
        self.verticalLayout_2.addWidget(self.Button_waveFLeft)
        self.Button_waveFRight = QtWidgets.QPushButton(self.groupBox_wave)
        self.Button_waveFRight.setObjectName("Button_waveFRight")
        self.Button_waveFRight.clicked.connect(waveFRight)
        
        self.verticalLayout_2.addWidget(self.Button_waveFRight)
        self.Button_waveRLeft = QtWidgets.QPushButton(self.groupBox_wave)
        self.Button_waveRLeft.setObjectName("Button_waveRLeft")
        self.Button_waveRLeft.clicked.connect(waveRLeft)
        
        self.verticalLayout_2.addWidget(self.Button_waveRLeft)
        self.Button_waveRRight = QtWidgets.QPushButton(self.groupBox_wave)
        self.Button_waveRRight.setObjectName("Button_waveRRight")
        self.Button_waveRRight.clicked.connect(waveRRight)
        
        self.verticalLayout_2.addWidget(self.Button_waveRRight)
        self.gridLayout_7.addWidget(self.groupBox_wave, 0, 0, 2, 1)
        self.groupBox_lean = QtWidgets.QGroupBox(self.tab_gestures)
        self.groupBox_lean.setObjectName("groupBox_lean")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_lean)
        self.verticalLayout_3.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_3.setSpacing(6)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Button_leanLeft = QtWidgets.QPushButton(self.groupBox_lean)
        self.Button_leanLeft.setObjectName("Button_leanLeft")
        self.Button_leanLeft.clicked.connect(leanLeft)
        
        self.verticalLayout_3.addWidget(self.Button_leanLeft)
        self.Button_leanRight = QtWidgets.QPushButton(self.groupBox_lean)
        self.Button_leanRight.setObjectName("Button_leanRight")
        self.Button_leanRight.clicked.connect(leanRight)
        
        self.verticalLayout_3.addWidget(self.Button_leanRight)
        self.Button_leanForward = QtWidgets.QPushButton(self.groupBox_lean)
        self.Button_leanForward.setObjectName("Button_leanForward")
        self.Button_leanForward.clicked.connect(leanForward)
        
        self.verticalLayout_3.addWidget(self.Button_leanForward)
        self.Button_leanBackward = QtWidgets.QPushButton(self.groupBox_lean)
        self.Button_leanBackward.setObjectName("Button_leanBackward")
        self.Button_leanBackward.clicked.connect(leanBackward)
        
        self.verticalLayout_3.addWidget(self.Button_leanBackward)
        self.gridLayout_7.addWidget(self.groupBox_lean, 0, 1, 2, 1)
        self.groupBox_scared = QtWidgets.QGroupBox(self.tab_gestures)
        self.groupBox_scared.setObjectName("groupBox_scared")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_scared)
        self.verticalLayout_7.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_7.setSpacing(6)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.Button_animate = QtWidgets.QPushButton(self.groupBox_scared)
        self.Button_animate.setObjectName("Button_animate")
        self.Button_animate.clicked.connect(onScaredClicked)
        self.verticalLayout_7.addWidget(self.Button_animate)
        self.Layout_shakes = QtWidgets.QHBoxLayout()
        self.Layout_shakes.setSpacing(6)
        self.Layout_shakes.setObjectName("Layout_shakes")
        self.label_shakes = QtWidgets.QLabel(self.groupBox_scared)
        self.label_shakes.setObjectName("label_shakes")
        self.Layout_shakes.addWidget(self.label_shakes)
        self.spinBox_shakes = QtWidgets.QSpinBox(self.groupBox_scared)
        self.spinBox_shakes.setObjectName("spinBox_shakes")
        self.Layout_shakes.addWidget(self.spinBox_shakes)
        self.verticalLayout_7.addLayout(self.Layout_shakes)
        self.Layout_Beeps = QtWidgets.QHBoxLayout()
        self.Layout_Beeps.setSpacing(6)
        self.Layout_Beeps.setObjectName("Layout_Beeps")
        self.beeps_label = QtWidgets.QLabel(self.groupBox_scared)
        self.beeps_label.setObjectName("beeps_label")
        self.Layout_Beeps.addWidget(self.beeps_label)
        self.beeps_spinBox = QtWidgets.QSpinBox(self.groupBox_scared)
        self.beeps_spinBox.setObjectName("beeps_spinBox")
        self.Layout_Beeps.addWidget(self.beeps_spinBox)
        self.verticalLayout_7.addLayout(self.Layout_Beeps)
        self.gridLayout_7.addWidget(self.groupBox_scared, 0, 2, 1, 1)
        self.groupBox_chirp = QtWidgets.QGroupBox(self.tab_gestures)
        self.groupBox_chirp.setObjectName("groupBox_chirp")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_chirp)
        self.verticalLayout_8.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_8.setSpacing(6)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.Button_play = QtWidgets.QPushButton(self.groupBox_chirp)
        self.Button_play.setObjectName("Button_play")
        self.Button_play.clicked.connect(onChirpClicked)
        
        self.verticalLayout_8.addWidget(self.Button_play)
        self.beepsLayout = QtWidgets.QHBoxLayout()
        self.beepsLayout.setSpacing(6)
        self.beepsLayout.setObjectName("beepsLayout")
        self.label_beeps = QtWidgets.QLabel(self.groupBox_chirp)
        self.label_beeps.setObjectName("label_beeps")
        self.beepsLayout.addWidget(self.label_beeps)
        self.spinBox_beeps = QtWidgets.QSpinBox(self.groupBox_chirp)
        self.spinBox_beeps.setObjectName("spinBox_beeps")
        self.beepsLayout.addWidget(self.spinBox_beeps)
        self.verticalLayout_8.addLayout(self.beepsLayout)
        self.gridLayout_7.addWidget(self.groupBox_chirp, 1, 2, 1, 1)
        self.tabs_teleop.addTab(self.tab_gestures, "")
        self.gridLayout_16.addWidget(self.tabs_teleop, 0, 0, 1, 1)
        RosBotMainWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtWidgets.QMenuBar(RosBotMainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 549, 30))
        self.menuBar.setObjectName("menuBar")
        self.menuFile = QtWidgets.QMenu(self.menuBar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menuBar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuConfiguration = QtWidgets.QMenu(self.menuBar)
        self.menuConfiguration.setObjectName("menuConfiguration")
        RosBotMainWindow.setMenuBar(self.menuBar)
        self.statusBar = QtWidgets.QStatusBar(RosBotMainWindow)
        self.statusBar.setObjectName("statusBar")
        RosBotMainWindow.setStatusBar(self.statusBar)
        self.action_Contents = QtWidgets.QAction(RosBotMainWindow)
        self.action_Contents.setObjectName("action_Contents")
        self.action_About = QtWidgets.QAction(RosBotMainWindow)
        self.action_About.setObjectName("action_About")
        self.action_About.triggered.connect(showAbout)
        
        self.actionExit = QtWidgets.QAction(RosBotMainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(app.quit)
        
        self.actionOpen_configuration = QtWidgets.QAction(RosBotMainWindow)
        #self.actionOpen_configuration.setEnabled(False)
        self.actionOpen_configuration.setObjectName("actionOpen_configuration")
        self.actionOpen_configuration.triggered.connect(OpenCfg)
        
        self.actionSave_configuration = QtWidgets.QAction(RosBotMainWindow)
        #self.actionSave_configuration.setEnabled(False)
        self.actionSave_configuration.setObjectName("actionSave_configuration")
        self.actionSave_configuration.triggered.connect(SaveCfg)
        
        self.actionServo_configuration = QtWidgets.QAction(RosBotMainWindow)
        self.actionServo_configuration.setObjectName("actionServo_configuration")
        self.actionServo_configuration.triggered.connect(ServoCfg)
        self.actionJoint_configuration = QtWidgets.QAction(RosBotMainWindow)
        self.actionJoint_configuration.setObjectName("actionJoint_configuration")
        self.actionJoint_configuration.triggered.connect(JointCfg)
        self.menuFile.addAction(self.actionOpen_configuration)
        self.menuFile.addAction(self.actionSave_configuration)
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.action_Contents)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.action_About)
        self.menuConfiguration.addAction(self.actionServo_configuration)
        self.menuConfiguration.addAction(self.actionJoint_configuration)
        self.menuBar.addAction(self.menuFile.menuAction())
        self.menuBar.addAction(self.menuConfiguration.menuAction())
        self.menuBar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(RosBotMainWindow)
        self.tabs_teleop.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(RosBotMainWindow)

    def retranslateUi(self, RosBotMainWindow):
        _translate = QtCore.QCoreApplication.translate
        RosBotMainWindow.setWindowTitle(_translate("RosBotMainWindow", "RosBotMainWindow"))
        self.groupBox_diag.setTitle(_translate("RosBotMainWindow", "Diagnostic messages"))
        self.textBrowser_log.setPlaceholderText(_translate("RosBotMainWindow", "Robot Teleop GUI Version 0.01"))
        self.groupBox_speed.setTitle(_translate("RosBotMainWindow", "Speed override:"))
        self.label_min.setText(_translate("RosBotMainWindow", "Faster"))
        self.label_max.setText(_translate("RosBotMainWindow", "Slower"))
        self.groupBox_linear.setTitle(_translate("RosBotMainWindow", "Linear movement:"))
        self.Button_right.setText(_translate("RosBotMainWindow", "Right"))
        self.Button_backward.setText(_translate("RosBotMainWindow", "Backward"))
        self.Button_left.setText(_translate("RosBotMainWindow", "Left"))
        self.Button_forward.setText(_translate("RosBotMainWindow", "Forward"))
        self.groupBox_angular.setTitle(_translate("RosBotMainWindow", "Angular movement:"))
        self.Button_zminus.setText(_translate("RosBotMainWindow", "Rotate Z+"))
        self.Button_zplus.setText(_translate("RosBotMainWindow", "Rotate Z-"))
        self.tabs_teleop.setTabText(self.tabs_teleop.indexOf(self.tab_Movement), _translate("RosBotMainWindow", "Movement"))
        self.groupBox_wave.setTitle(_translate("RosBotMainWindow", "Wave with leg:"))
        self.Button_waveFLeft.setText(_translate("RosBotMainWindow", "Front Left"))
        self.Button_waveFRight.setText(_translate("RosBotMainWindow", "Front Right"))
        self.Button_waveRLeft.setText(_translate("RosBotMainWindow", "Rear Left"))
        self.Button_waveRRight.setText(_translate("RosBotMainWindow", "Rear Right"))
        self.groupBox_lean.setTitle(_translate("RosBotMainWindow", "Lean direction:"))
        self.Button_leanLeft.setText(_translate("RosBotMainWindow", "Left"))
        self.Button_leanRight.setText(_translate("RosBotMainWindow", "Right"))
        self.Button_leanForward.setText(_translate("RosBotMainWindow", "Forward"))
        self.Button_leanBackward.setText(_translate("RosBotMainWindow", "Backward"))
        self.groupBox_scared.setTitle(_translate("RosBotMainWindow", "Scared"))
        self.Button_animate.setText(_translate("RosBotMainWindow", "Animate"))
        self.label_shakes.setText(_translate("RosBotMainWindow", "Shakes:"))
        self.beeps_label.setText(_translate("RosBotMainWindow", "Beeps:"))
        self.groupBox_chirp.setTitle(_translate("RosBotMainWindow", "Chirp"))
        self.Button_play.setText(_translate("RosBotMainWindow", "Play"))
        self.label_beeps.setText(_translate("RosBotMainWindow", "Beeps:"))
        self.tabs_teleop.setTabText(self.tabs_teleop.indexOf(self.tab_gestures), _translate("RosBotMainWindow", "Gestures"))
        self.menuFile.setTitle(_translate("RosBotMainWindow", "File"))
        self.menuHelp.setTitle(_translate("RosBotMainWindow", "Help"))
        self.menuConfiguration.setTitle(_translate("RosBotMainWindow", "Configuration"))
        self.action_Contents.setText(_translate("RosBotMainWindow", "&Contents"))
        self.action_About.setText(_translate("RosBotMainWindow", "&About"))
        self.actionExit.setText(_translate("RosBotMainWindow", "Exit"))
        self.actionOpen_configuration.setText(_translate("RosBotMainWindow", "Open configuration..."))
        self.actionSave_configuration.setText(_translate("RosBotMainWindow", "Save configuration..."))
        self.actionServo_configuration.setText(_translate("RosBotMainWindow", "Servo configuration..."))
        self.actionJoint_configuration.setText(_translate("RosBotMainWindow", "Joint configuration..."))

def set_servo_angle(degg):
    """ 
    Helper function to calculate the servo pulse value for pwm.set_pwm()
    """
    if degg > 180:
        degg = 180
    elif degg < 0:
        degg = 0
    servopuls = int(servo_min + (servo_max-servo_min)/180 * degg)
    return servopuls

class WBServo:
    """Walking robot servo control class, based on ALLBOT arduino/cpp class"""
    
    def __init__(self, pin, flipped, offset, angle):
        self.flipped = flipped
        self.pin = pin
        self.offset = offset
        self.angle = 180 - angle if flipped else angle 
        self.to_angle = self.angle
        pwm.set_pwm(pin, 0, set_servo_angle(self.angle))
    
    def move(self, to_angle):
        self.to_angle = 180 - to_angle if self.flipped else to_angle
        self.to_angle = self.to_angle - self.offset if self.flipped else self.to_angle + self.offset

def animate(speedms):
    """
    Invoking this function traverses all servos that are set to move 
    synchronously and will move them gradually with time delay "speedms".
    It compares if angle & to_angle and if not, then they are moved with
    a single degree per time delay, until to_angle and angle are equal.
    """
    not_done = True
    while not_done:
        not_done = False
        for i in servos():
            if i.angle != i.to_angle:
                i.angle += 1 if i.angle<i.to_angle else -1
                not_done = True
                pwm.set_pwm(i.pin, 0, set_servo_angle(i.angle))
                # print(i.angle) #DEBUG
        time.sleep(speedms)

def servos():
    """This name list is required for animate() to function"""
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    yield hipFrontLeft
    yield hipFrontRight
    yield hipRearLeft
    yield hipRearRight
    yield kneeFrontLeft
    yield kneeFrontRight
    yield kneeRearLeft
    yield kneeRearRight

def VR408_reset_spider():
    """Stand-still position of the ALLBOT VR408"""
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeRearRight.move(45)
    kneeFrontLeft.move(45)
    kneeFrontRight.move(45)
    kneeRearLeft.move(45)
    hipRearRight.move(45)
    hipFrontLeft.move(45)
    hipFrontRight.move(45)
    hipRearLeft.move(45)
    animate(0.001)

#--------------------------------------------------------------
def chirp(beeps, speed):
    print("chirp not implemented yet", beeps, speed)

#--------------------------------------------------------------
def VR408_waverearleft(waves, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeRearLeft.move(180)
    animate(speed)
    
    for i in range(0, waves):
        hipRearLeft.move(0)
        animate(speed)
        
        hipRearLeft.move(65)
        animate(speed)
        
        hipRearLeft.move(0)
        animate(speed)
        
        hipRearLeft.move(45)
        animate(speed)
    
    kneeRearLeft.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_waverearright(waves, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeRearRight.move(180)
    animate(speed)
    
    for i in range(0, waves):
        hipRearRight.move(0)
        animate(speed)
        
        hipRearRight.move(65)
        animate(speed)
        
        hipRearRight.move(0)
        animate(speed)
        
        hipRearRight.move(45)
        animate(speed)
    
    kneeRearRight.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_wavefrontright(waves, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeFrontRight.move(180)
    animate(speed)
    
    for i in range(0, waves):
        hipFrontRight.move(0)
        animate(speed)
        
        hipFrontRight.move(65)
        animate(speed)
        
        hipFrontRight.move(0)
        animate(speed)
        
        hipFrontRight.move(45)
        animate(speed)
    
    kneeFrontRight.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_wavefrontleft(waves, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeFrontLeft.move(180)
    animate(speed)
    
    for i in range(0, waves):
        hipFrontLeft.move(0)
        animate(speed)
        
        hipFrontLeft.move(65)
        animate(speed)
        
        hipFrontLeft.move(0)
        animate(speed)
        
        hipFrontLeft.move(45)
        animate(speed)
    
    kneeFrontLeft.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_scared(shakes, beeps):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeFrontRight.move(0)
    kneeRearRight.move(0)
    kneeFrontLeft.move(0)
    kneeRearLeft.move(0)
    animate(0.005)
    
    for i in range(0, shakes):
        hipRearRight.move(80)
        hipRearLeft.move(10)
        hipFrontRight.move(10)
        hipFrontLeft.move(80)
        animate(0.01);
        
        hipRearLeft.move(80)
        hipRearRight.move(10)
        hipFrontLeft.move(10)
        hipFrontRight.move(80)
        animate(0.005)
    
    hipRearRight.move(45)
    hipRearLeft.move(45)
    hipFrontRight.move(45)
    hipFrontLeft.move(45)
    animate(0.02)
    
    chirp(beeps, 0)
    
    kneeFrontRight.move(45)
    kneeRearRight.move(45)
    kneeFrontLeft.move(45)
    kneeRearLeft.move(45)
    animate(0.0075);

#--------------------------------------------------------------
def VR408_leanbackward(speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeRearLeft.move(90)
    kneeRearRight.move(90)
    animate(speed)
    
    time.sleep(speed/2)
    
    kneeRearLeft.move(45)
    kneeRearRight.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_leanleft(speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeFrontLeft.move(90)
    kneeRearLeft.move(90)
    animate(speed)
    
    time.sleep(speed/2)
    
    kneeFrontLeft.move(45)
    kneeRearLeft.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_leanright(speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeFrontRight.move(90)
    kneeRearRight.move(90)
    animate(speed)
    
    time.sleep(speed/2)
    
    kneeFrontRight.move(45)
    kneeRearRight.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_leanforward(speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    kneeFrontLeft.move(90)
    kneeFrontRight.move(90)
    animate(speed)
    
    time.sleep(speed/2)
    
    kneeFrontLeft.move(45)
    kneeFrontRight.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_lookleft(speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    hipRearLeft.move(80)
    hipRearRight.move(10)
    hipFrontLeft.move(10)
    hipFrontRight.move(80)
    animate(speed)
    
    time.sleep(speed/2)
    
    hipRearRight.move(45)
    hipRearLeft.move(45)
    hipFrontRight.move(45)
    hipFrontLeft.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_lookright(speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    hipRearRight.move(80)
    hipRearLeft.move(10)
    hipFrontRight.move(10)
    hipFrontLeft.move(80)
    animate(speed)
    
    time.sleep(speed/2)
    
    hipRearRight.move(45)
    hipRearLeft.move(45)
    hipFrontRight.move(45)
    hipFrontLeft.move(45)
    animate(speed)

#--------------------------------------------------------------
def VR408_walkforward(steps, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    for i in range(0, steps):
        kneeRearRight.move(80)
        kneeFrontLeft.move(80)
        animate(speed)
        
        hipRearRight.move(80)
        hipFrontLeft.move(20)
        animate(speed)
        
        kneeRearRight.move(30)
        kneeFrontLeft.move(30)
        animate(speed)
        
        hipRearRight.move(45)
        hipFrontLeft.move(45)
        animate(speed)
        
        kneeRearRight.move(45)
        kneeFrontLeft.move(45)
        animate(speed)
        
        kneeRearLeft.move(80)
        kneeFrontRight.move(80)
        animate(speed)
        
        hipRearLeft.move(80)
        hipFrontRight.move(20)
        animate(speed)
        
        kneeRearLeft.move(30)
        kneeFrontRight.move(30)
        animate(speed)
        
        hipRearLeft.move(45)
        hipFrontRight.move(45)
        animate(speed)
        
        kneeRearLeft.move(45)
        kneeFrontRight.move(45)
        animate(speed)

#--------------------------------------------------------------
def VR408_walkbackward(steps, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
        
    for i in range(0, steps):
        kneeRearRight.move(80)
        kneeFrontLeft.move(80)
        animate(speed)
        
        hipRearRight.move(20)
        hipFrontLeft.move(80)
        animate(speed)
        
        kneeRearRight.move(30)
        kneeFrontLeft.move(30)
        animate(speed)
        
        hipRearRight.move(45)
        hipFrontLeft.move(45)
        animate(speed)
        
        kneeRearRight.move(45)
        kneeFrontLeft.move(45)
        animate(speed)
        
        kneeRearLeft.move(80)
        kneeFrontRight.move(80)
        animate(speed)
        
        hipRearLeft.move(20)
        hipFrontRight.move(80)
        animate(speed)
        
        kneeRearLeft.move(30)
        kneeFrontRight.move(30)
        animate(speed)
        
        hipRearLeft.move(45)
        hipFrontRight.move(45)
        animate(speed)
        
        kneeRearLeft.move(45)
        kneeFrontRight.move(45)
        animate(speed)

#--------------------------------------------------------------
def VR408_walkright(steps, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    for i in range(0, steps):
        kneeRearLeft.move(80)
        kneeFrontRight.move(80)
        animate(speed)
        
        hipRearLeft.move(0)
        hipFrontRight.move(90)
        animate(speed)
        
        kneeRearLeft.move(30)
        kneeFrontRight.move(30)
        animate(speed)
        
        hipRearLeft.move(45)
        hipFrontRight.move(45)
        animate(speed)
        
        kneeRearLeft.move(45)
        kneeFrontRight.move(45)
        animate(speed)
         
        kneeRearRight.move(80)
        kneeFrontLeft.move(80)
        animate(speed)
        
        hipRearRight.move(90)
        hipFrontLeft.move(0)
        animate(speed)
        
        kneeRearRight.move(30)
        kneeFrontLeft.move(30)
        animate(speed)
        
        hipRearRight.move(45)
        hipFrontLeft.move(45)
        animate(speed)
        
        kneeRearRight.move(45)
        kneeFrontLeft.move(45)
        animate(speed)

#--------------------------------------------------------------
def VR408_walkleft(steps, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    for i in range(0, steps):
        kneeRearRight.move(80)
        kneeFrontLeft.move(80)
        animate(speed)
        
        hipRearRight.move(90)
        hipFrontLeft.move(90)
        animate(speed)
        
        kneeRearRight.move(30)
        kneeFrontLeft.move(30)
        animate(speed)
        
        hipRearRight.move(45)
        hipFrontLeft.move(45)
        animate(speed)
        
        kneeRearRight.move(45)
        kneeFrontLeft.move(45)
        animate(speed)
        
        kneeRearLeft.move(80)
        kneeFrontRight.move(80)
        animate(speed)
        
        hipRearLeft.move(0)
        hipFrontRight.move(0)
        animate(speed)
        
        kneeRearLeft.move(30)
        kneeFrontRight.move(30)
        animate(speed)
        
        hipRearLeft.move(45)
        hipFrontRight.move(45)
        animate(speed)
        
        kneeRearLeft.move(45)
        kneeFrontRight.move(45)
        animate(speed)

#--------------------------------------------------------------
def VR408_turnleft(steps, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    for i in range(0, steps):
        kneeRearRight.move(80)
        kneeFrontLeft.move(80)
        animate(speed)
        
        hipRearRight.move(90)
        hipFrontLeft.move(90)
        animate(speed)
        
        kneeRearRight.move(30)
        kneeFrontLeft.move(30)
        animate(speed)
        
        hipRearRight.move(45)
        hipFrontLeft.move(45)
        animate(speed)
        
        kneeRearRight.move(45)
        kneeFrontLeft.move(45)
        animate(speed)
        
        kneeRearLeft.move(80)
        kneeFrontRight.move(80)
        animate(speed)
        
        hipRearLeft.move(0)
        hipFrontRight.move(0)
        animate(speed)
        
        kneeRearLeft.move(30)
        kneeFrontRight.move(30)
        animate(speed)
        
        hipRearLeft.move(45)
        hipFrontRight.move(45)
        animate(speed)
        
        kneeRearLeft.move(45)
        kneeFrontRight.move(45)
        animate(speed)

#--------------------------------------------------------------
def VR408_turnright(steps, speed):
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    for i in range(0, steps):
        kneeRearRight.move(80)
        kneeFrontLeft.move(80)
        animate(speed)
        
        hipRearRight.move(90)
        hipFrontLeft.move(90)
        animate(speed)
        
        kneeRearRight.move(30)
        kneeFrontLeft.move(30)
        animate(speed)
        
        hipRearRight.move(45)
        hipFrontLeft.move(45)
        animate(speed)
        
        kneeRearRight.move(45)
        kneeFrontLeft.move(45)
        animate(speed)
        
        kneeRearLeft.move(80)
        kneeFrontRight.move(80)
        animate(speed)
        
        hipRearLeft.move(0)
        hipFrontRight.move(0)
        animate(speed)
        
        kneeRearLeft.move(30)
        kneeFrontRight.move(30)
        animate(speed)
        
        hipRearLeft.move(45)
        hipFrontRight.move(45)
        animate(speed)
        
        kneeRearLeft.move(45)
        kneeFrontRight.move(45)
        animate(speed)

def moveForward():
    VR408_walkforward(1, animateSpeed)
    ui.textBrowser_log.append("Step Forward.")

def moveBackward():
    VR408_walkbackward(1, animateSpeed)
    ui.textBrowser_log.append("Step Backward.")

def moveLeft():
    VR408_walkleft(1, animateSpeed)
    ui.textBrowser_log.append("Step Left.")

def moveRight():
    VR408_walkright(1, animateSpeed)
    ui.textBrowser_log.append("Step Right.")

def RotateCW():
    VR408_turnright(1, animateSpeed)
    ui.textBrowser_log.append("Rotate Clockwise.")

def RotateCCW():
    VR408_turnleft(1, animateSpeed)
    ui.textBrowser_log.append("Rotate Counterclockwise.")

def waveFLeft():
    VR408_wavefrontleft(1, animateSpeed)
    ui.textBrowser_log.append("Wave Front Left.")

def waveFRight():
    VR408_wavefrontright(1, animateSpeed)
    ui.textBrowser_log.append("Wave Front Right.")

def waveRLeft():
    VR408_waverearleft(1, animateSpeed)
    ui.textBrowser_log.append("Wave Rear Left.")

def waveRRight():
    VR408_waverearright(1, animateSpeed)
    ui.textBrowser_log.append("Wave Rear Right.")
    
def leanLeft():
    VR408_leanleft(animateSpeed)
    ui.textBrowser_log.append("Lean Left.")

def leanRight():
    VR408_leanright(animateSpeed)
    ui.textBrowser_log.append("Lean Right.")

def leanForward():
    VR408_leanforward(animateSpeed)
    ui.textBrowser_log.append("Lean Forward.")

def leanBackward():
    VR408_leanbackward(animateSpeed)
    ui.textBrowser_log.append("Lean Backward.")

def OpenCfg():
    fileName = QtWidgets.QFileDialog.getOpenFileName(RosBotMainWindow, 'Load configuration', '', "INI Files (*.ini);;All Files (*.*)")
    #print(fileName)
    if fileName[0] != "":
        ui.textBrowser_log.append("Load configuration from file: " + fileName[0])

def SaveCfg():
    fileName = QtWidgets.QFileDialog.getSaveFileName(RosBotMainWindow, 'Save configuration', '', "INI Files (*.ini);;All Files (*.*)")
    #print(fileName)
    if fileName[0] != "":
        ui.textBrowser_log.append("Save configuration to file: " + fileName[0])

def ServoCfg():
    if DialogServoConfig.exec_():
        ui.textBrowser_log.append("Servo configuration dialog accepted.")
        
    else:
        ui.textBrowser_log.append("Servo configuration dialog rejected.")
        

def reinitServo():
    global hipFrontLeft
    global kneeFrontLeft
    global hipFrontRight
    global kneeFrontRight
    global hipRearLeft
    global kneeRearLeft
    global hipRearRight
    global kneeRearRight
    
    hipFrontLeft = WBServo(servoList[0], True, 0, 45)
    kneeFrontLeft = WBServo(servoList[1], False, 0, 45)
    hipFrontRight = WBServo(servoList[2], True, 0, 45)
    kneeFrontRight = WBServo(servoList[3], True, 0, 45)
    hipRearLeft = WBServo(servoList[4], False, 0, 45)
    kneeRearLeft = WBServo(servoList[5], False, 0, 45)
    hipRearRight = WBServo(servoList[6], False, 0, 45)
    kneeRearRight = WBServo(servoList[7], True, 0, 45)

def JointCfg():
    scfga.combo_hfLeft.setCurrentIndex(servoList[0]) 
    scfga.combo_hfRight.setCurrentIndex(servoList[4])
    scfga.combo_hrLeft.setCurrentIndex(servoList[1])
    scfga.combo_hrRight.setCurrentIndex(servoList[5])
    scfga.combo_kFLeft.setCurrentIndex(servoList[2])
    scfga.combo_kFRight.setCurrentIndex(servoList[6])
    scfga.combo_kRLeft.setCurrentIndex(servoList[3])
    scfga.combo_kRRight.setCurrentIndex(servoList[7])
    if AssignServoDialog.exec_():
        # first check duplicati...
        servoList[0] = scfga.combo_hfLeft.currentIndex()
        servoList[4] = scfga.combo_hfRight.currentIndex() 
        servoList[1] = scfga.combo_hrLeft.currentIndex()
        servoList[5] = scfga.combo_hrRight.currentIndex()
        servoList[2] = scfga.combo_kFLeft.currentIndex()
        servoList[6] = scfga.combo_kFRight.currentIndex()
        servoList[3] = scfga.combo_kRLeft.currentIndex()
        servoList[7] = scfga.combo_kRRight.currentIndex()
        reinitServo()
        ui.textBrowser_log.append("Joint configuration dialog accepted.")
    else:
        ui.textBrowser_log.append("Joint configuration dialog rejected.")

def onScaredClicked():
    if ui.spinBox_shakes.value() == 0:
        ui.textBrowser_log.append('Cannot animate scared with 0 shakes...')
    else:
        ui.textBrowser_log.append('Animate scared with ' + str(ui.spinBox_shakes.value()) + ' shakes and ' + str(ui.beeps_spinBox.value()) + ' beeps')
        VR408_scared(ui.spinBox_shakes.value(), ui.beeps_spinBox.value())

def onChirpClicked():
    if ui.spinBox_beeps.value() == 0:
        ui.textBrowser_log.append('Cannot chirp with 0 beeps...')
    else:
        ui.textBrowser_log.append('Chirp with ' + str(ui.spinBox_beeps.value()) + ' beeps.')
        

def onSliderChange(value):
    global animateSpeed
    print('slider value is now: {}'.format(value))
    animateSpeed = (value if value != 0 else value)/1000
    ui.textBrowser_log.append('slider value is now: {}'.format(value))

def showAbout():
    msgBox = QtWidgets.QMessageBox()
    msgBox.setIcon(QtWidgets.QMessageBox.Information)
    msgBox.setText("A simple GUI for controlling the Velleman VR408 robot or similar.")
    msgBox.setWindowTitle("About RosBotGui")
    msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
    msgBox.exec_()

if __name__ == "__main__":
    import sys
    reinitServo()
    app = QtWidgets.QApplication(sys.argv)
    RosBotMainWindow = QtWidgets.QMainWindow()
    ui = Ui_RosBotMainWindow()
    ui.setupUi(RosBotMainWindow)
    DialogServoConfig = QtWidgets.QDialog()
    scfg = Ui_DialogServoConfig()
    scfg.setupUi(DialogServoConfig)
    AssignServoDialog = QtWidgets.QDialog()
    scfga = Ui_AssignServoDialog()
    scfga.setupUi(AssignServoDialog)
    RosBotMainWindow.show()
    status = app.exec_()
    pwm = Adafruit_PCA9685.PCA9685()
    sys.exit(status)
